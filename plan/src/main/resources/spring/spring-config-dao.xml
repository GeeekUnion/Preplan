<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
	    http://www.springframework.org/schema/context 
	    http://www.springframework.org/schema/context/spring-context.xsd 
	    http://www.springframework.org/schema/aop 
	    http://www.springframework.org/schema/aop/spring-aop.xsd 
	    http://www.springframework.org/schema/tx 
	    http://www.springframework.org/schema/tx/spring-tx.xsd"
	default-autowire="byName">

	<!-- 不能随意动，平台中对数据库配置的获取都放在这里处理 -->
	<bean id="propertyConfig"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:database/jdbc.properties</value>
			</list>
		</property>
	</bean>

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<!-- 数据库链接参数 -->
		<property name="driverClass" value="${db.driverClass}" />
		<property name="jdbcUrl" value="${db.url}" />
		<property name="user" value="${db.username}" />
		<property name="password" value="${db.password}" />

		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize" value="5" />

		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="30" />

		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="10" />

		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="60" />

		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="5" />

		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements" value="0" />

		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="60" />

		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="30" />

		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure" value="false" />

		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout" value="false" />

		<!--重新尝试的时间间隔,默认是10000毫秒 -->
		<property name="acquireRetryDelay" value="10000" />

		<!-- 获取连接同时校验连接的有效性，性能消耗大，默认是false -->
		<property name="testConnectionOnCheckin" value="false" />

	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="configLocation">
			<value>classpath:hibernate/hibernate.cfg.xml</value>
		</property>
		<property name="packagesToScan">
			<list>
				<value>com.**.po</value>
				<value>com.**.domain</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${db.dialect}</prop>
				<!-- 2333333333333333333333333333333333333 -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.use_sql_comments">true</prop>
				<!-- 共享数据库，独立schema多租户方式开始 -->
				<!-- 实现多租户的方式：1。 NONE：非多租户，为默认值 
				                 2.SCHEMA：一个租户一个Schema
				                 3.DATABASE：一个租户一个database
				                 4.DISCRIMINATOR：租户共享数据库。
				-->
<!-- 				<prop key="hibernate.multiTenancy">SCHEMA</prop> -->
				<!-- hibernate属性规定合约，以使hibernate能够解析出应用当前的tenantId -->
<!-- 				<prop key="hibernate.tenant_identifier_resolver">com.gsafety.cloudframework.common.base.tenant.TenantIdResolver</prop> -->
				<!-- 置顶ConnectionProvider,即hibernate需要知道如何以租户特有的方式获取数据连接 -->
<!-- 				<prop key="hibernate.multi_tenant_connection_provider">com.gsafety.cloudframework.common.base.connection.provider.SchemaBaseMultiTenantConnectionProvider</prop> -->
				<!-- 共享数据库，独立schema多租户方式结束-->
			</props>
		</property>
	</bean>

</beans>